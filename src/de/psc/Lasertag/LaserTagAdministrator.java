package de.psc.Lasertag;


import com.codename1.components.*;
import com.codename1.io.Log;
import com.codename1.ui.*;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Image;
import com.codename1.ui.TextField;
import com.codename1.ui.events.SelectionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.list.GenericListCellRenderer;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

import de.psc.Lasertag.GUI.UpdateTabGUI;
import de.psc.Lasertag.Game.*;
import de.psc.Lasertag.SUPPORT.Utils;

import java.util.*;

import static com.codename1.ui.CN.*;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class LaserTagAdministrator {

    private Form current;
    private Resources theme;


    public Game selGame;
    public Team selTeam;
    public Player selPlayer;
    public Tabs tab;
    public Form hi;


    public int mm;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start(){
        if(current != null){
            current.show();
            return;
        }
        hi = new Form("LaserTag", new BorderLayout());
        //hi.add(new Label("Hi World"));

        this.mm = Display.getInstance().convertToPixels(3);


        Vector<Game> games = new Vector();
        EncodedImage placeholder = EncodedImage.createFromImage(Image.createImage(this.mm * 3, this.mm * 4, 0), false);

        //list of games
        Utils.parseGames(getClass(), games);


        tab = new Tabs();

        /*
        int mm = Display.getInstance().convertToPixels(3);
        EncodedImage placeholder = EncodedImage.createFromImage(Image.createImage(mm * 3, mm * 4, 0), false);

        Image iconB1 = URLImage.createToStorage(placeholder, "icon1", "Triangle_warning_sign.png");
*/
        //Component data = new Component();
        //Vector<MultiButton> data = new Vector();

        Container container_games = BoxLayout.encloseY();
        Container container_teams = BoxLayout.encloseY();
        Container container_scores = BoxLayout.encloseY();
        Container container_goals = BoxLayout.encloseY();
        Container container_mutators = BoxLayout.encloseY();
        Container container_go = BoxLayout.encloseY();

        HashMap<UpdateTabGUI.GUI_Elements, Container> allContainer = new HashMap<UpdateTabGUI.GUI_Elements, Container>();
        allContainer.put(UpdateTabGUI.GUI_Elements.GAMES, container_games);
        allContainer.put(UpdateTabGUI.GUI_Elements.TEAMS, container_teams);
        allContainer.put(UpdateTabGUI.GUI_Elements.SCORES, container_scores);
        allContainer.put(UpdateTabGUI.GUI_Elements.GOALS, container_goals);
        allContainer.put(UpdateTabGUI.GUI_Elements.MUTATORS, container_mutators);
        allContainer.put(UpdateTabGUI.GUI_Elements.GO, container_go);

        UpdateTabGUI.UpdateGames(allContainer, games, this);

        tab.addTab("Games", container_games);
        tab.addTab("Teams", container_teams);
        tab.addTab("Mutators", container_mutators);
        tab.addTab("Scores", container_scores);
        tab.addTab("Goals", container_goals);
        tab.addTab("GO", container_go);


        FloatingActionButton fab = FloatingActionButton.createFAB(FontImage.MATERIAL_ADD);
        //fab.addActionListener(e -> ToastBar.showErrorMessage("Not implemented yet..."));
        fab.createSubFAB(FontImage.MATERIAL_DELETE, "Delete Team").addActionListener(
                e -> {selGame.getTeams().remove(selTeam);
                    this.selTeam=null;
                    UpdateTabGUI.UpdateTeams(allContainer, games, this);
                });

        fab.createSubFAB(FontImage.MATERIAL_COLOR_LENS, "Team Color").addActionListener(
                e -> {
                    Dialog d = new Dialog("Change Team color");
                    d.setLayout(new BorderLayout());
                    d.setBlurBackgroundRadius(8);
                    Container disp = BoxLayout.encloseY();

                    Vector<Integer> baseColors = new Vector();
                    baseColors.add(this.selTeam.getColor());
                    baseColors.add(0x000000);
                    baseColors.add(0xFF0000);
                    baseColors.add(0xFFFF00);
                    baseColors.add(0xFFFFFF);

                    ComboBox col_comb = new ComboBox<>();
                    col_comb.setRenderer(new GenericListCellRenderer<>(new MultiButton(), new MultiButton()));
                    for (int col : baseColors) {
                        //Image testIcon = URLImage.createToStorage(placeholder, "icon1", "http://georgerrmartin.com/gallery/art/dragons05.jpg");
                        col_comb.addItem(UpdateTabGUI.createListEntry("" + col, col));
                    }
                    col_comb.setSelectedIndex(0);

                    disp.add(col_comb);

                    d.add(BorderLayout.CENTER, disp);


                    Button close = new Button("OK");
                    close.addActionListener(e2 ->
                            d.dispose()
                    );
                    d.add(BorderLayout.SOUTH, close);
                    d.show();

                    UpdateTabGUI.UpdateTeams(allContainer, games, this);
                });

        fab.createSubFAB(FontImage.MATERIAL_PEOPLE, "add Team").addActionListener(
                e -> {
                    Dialog d = new Dialog("Add new Team");
                    d.setLayout(new BorderLayout());
                    d.setBlurBackgroundRadius(8);
                    Container disp = BoxLayout.encloseY();
                    TextField teamNameField = new TextField("one");

                    disp.add(teamNameField);

                    Vector<Integer> baseColors = new Vector();
                    baseColors.add(0x000000);
                    baseColors.add(0xFF0000);
                    baseColors.add(0xFFFF00);
                    baseColors.add(0xFFFFFF);

                    ComboBox col_comb = new ComboBox<>();
                    col_comb.setRenderer(new GenericListCellRenderer<>(new MultiButton(), new MultiButton()));
                    for (int col : baseColors) {
                        //Image testIcon = URLImage.createToStorage(placeholder, "icon1", "http://georgerrmartin.com/gallery/art/dragons05.jpg");
                        col_comb.addItem(UpdateTabGUI.createListEntry("" + col, col));
                    }
                    col_comb.addActionListener(
                            e2 -> {
                                this.selTeam.setColor(baseColors.get(col_comb.getSelectedIndex()));
                                UpdateTabGUI.UpdateTeams(allContainer, games, this);
                            }
                    );
                    disp.add(col_comb);

                    d.add(BorderLayout.CENTER, disp);


                    Button close = new Button("OK");
                    close.addActionListener(e2 ->
                            d.dispose()
                    );
                    d.add(BorderLayout.SOUTH, close);
                    d.show();


                    Team t = new Team(teamNameField.getText(), baseColors.get(col_comb.getSelectedIndex()));
                    this.selGame.addTeams(t);
                    this.selTeam = t;
                    UpdateTabGUI.UpdateTeams(allContainer, games, this);
                });

            fab.createSubFAB(FontImage.MATERIAL_PERSON_ADD, "add Player").addActionListener(
                e -> {
                    Player p = new Player();
                    selTeam.addPlayers(p);
                    UpdateTabGUI.UpdateTeams(allContainer, games, this);
                });

            fab.bindFabToContainer(hi.getContentPane());
            fab.setVisible(false);

            tab.addSelectionListener(new SelectionListener() {
                 public void selectionChanged(int oldSelected, int newSelected){
                    if (oldSelected==1)
                        fab.setVisible(false);
                    if  (newSelected==1 && selGame!=null)
                        fab.setVisible(true);
                }
            });

        hi.add(BorderLayout.CENTER, tab);

        hi.show();
    }


    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
